myLegalName: "{{ .Values.corda.node.conf.legalName }}"
emailAddress: "{{ .Values.corda.node.conf.emailAddress }}"
p2pAddress: "{{ .Values.corda.node.conf.p2pAddress }}:{{ .Values.corda.node.conf.p2pPort }}"
{{- if .Values.corda.node.conf.compatibilityZoneEnabled }}
compatibilityZoneURL: "{{ .Values.corda.node.conf.compatibilityZoneURL }}"
{{- else }}
networkServices: {
  doormanURL: "{{ .Values.corda.node.conf.identityManagerAddress }}",
  networkMapURL: "{{ .Values.corda.node.conf.networkmapAddress }}"
}
{{- end }}
crlCheckSoftFail: {{ .Values.corda.node.conf.crlCheckSoftFail }}
{{- if ne .Values.corda.node.conf.tlsCertCrlDistPoint "" }}
tlsCertCrlDistPoint:  "{{ .Values.corda.node.conf.tlsCertCrlDistPoint }}",
tlsCertCrlIssuer: "{{ .Values.corda.node.conf.tlsCertCrlIssuer }}"
{{- end }}
devMode: {{ .Values.corda.node.conf.devMode }}
{{- if .Values.corda.node.conf.ssh.enabled }}
sshd:  {
  port: {{ .Values.corda.node.conf.ssh.sshdPort }}
}
{{- end }}
rpcSettings: {
  address: "0.0.0.0:{{ .Values.corda.node.conf.rpc.port }}",
  adminAddress: "0.0.0.0:{{ .Values.corda.node.conf.rpc.adminPort }}"
}
rpcUsers: [
{{- range $user := .Values.corda.node.conf.rpc.users }}
  {
    user: "{{ $user.name }}",
    password: "{{ $user.password }}",
    permissions: [
      "{{ $user.permissions }}"
    ]
  }
{{- end }}
]
{{- if .Values.corda.node.conf.monitoring.enabled }}
jmxMonitoringHttpPort: {{ .Values.corda.node.conf.monitoring.port }}
{{- end }}

dataSourceProperties: {
{{- if ne .Values.corda.node.conf.dataSource.className "" }}
  dataSourceClassName: "{{ .Values.corda.node.conf.dataSource.className }}",
  dataSource.url: "{{ .Values.corda.node.conf.dataSource.url }}",
{{- end}}
  dataSource.user: "{{ .Values.corda.node.conf.dataSource.user }}",
  dataSource.password: "{{ .Values.corda.node.conf.dataSource.password }}"
}
{{- if ne .Values.corda.node.conf.dataSource.className "" }}
database = {
{{- if eq .Values.corda.node.conf.dataSource.className "oracle.jdbc.pool.OracleDataSource" }}
    transactionIsolationLevel = READ_COMMITTED
    schema = xe
{{- end}}
    runMigration = true
}
{{- end}}

trustStorePassword: "{{ .Values.corda.node.conf.truststorePassword }}"
keyStorePassword : "{{ .Values.corda.node.conf.keystorePassword }}"
detectPublicIp: false
messagingServerAddress: "0.0.0.0:{{ .Values.corda.node.conf.p2pPort }}"
messagingServerExternal: false
enterpriseConfiguration: {
  externalBridge: true
}
{{- if .Values.corda.node.conf.allowDevCorDapps.enabled }}
cordappSignerKeyFingerprintBlacklist: [
]
{{- end }}
